``` xm1
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	

	<context:component-scan base-package="com.bit.jdbc" />
	
	<beans:bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
				p:driverClassName="oracle.jdbc.driver.OracleDriver"
				p:url="jdbc:oracle:thin:@localhost:1521:admin"
				p:username="scott"
				p:password="tiger"/>
				
	<!-- SqlSessionFactory -->
	<beans:bean  id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<!-- <beans:property name="configLocation" value="classpath:/mybatis-config.xml"/> -->
 		<beans:property name="mapperLocations" value="classpath:/sqlmap/**/*Mapper.xml"/> <!-- mapperLocations : mapper 파일의 위치를 지정함  -->
 		<beans:property name="typeAliasesPackage" value="com.bit.jdbc.model.dto"/> <!-- mapper에서 type을 지정할 때 도메인 클래스의 패키지 명을 생략할 수 있도록함. resultType="com.myapp.domain.Emp"를 resultType="Emp"로 사용할 수 있
																					  	  도록 함  -->

		<beans:property name="transactionFactory">
			<beans:bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory"/>
		</beans:property>																			  
	</beans:bean>
	
	<!-- SqlSession : MyBatis SQL 메소드를 호출하는데 사용.thread safe하며 여러 DAO에서 사용 가능 DAO class에 SqlSession type의 setter를 정의해야한다.-->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/>
	</beans:bean>
	
	<!-- Mapper : sql 문을 가지고있는 파일 -->
	<beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<beans:property name="basePackage" value="com.bit.jdbc.dao.mapper"/>
	</beans:bean>
	
	<!-- 트랙잭션 매니저 Bean 등록 commit, rollback을 가지고 있는애를 호출 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- 어노테이션기반으로 트랜잭션 처리 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- <tx:jta-transaction-manager/> -->
			
	
	<!-- jdbcTemplate
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
				p:dataSource-ref="dataSource"/> 
	-->
	
	
</beans:beans>
``` 
